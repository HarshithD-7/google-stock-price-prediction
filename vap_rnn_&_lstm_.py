# -*- coding: utf-8 -*-
"""Vap_RNN & LSTM .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GVBk7uYSvcTRZ4TqLFy_E0vmnxfLwkrk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

#Many to One RNN
from keras.models import Sequential
from keras.layers import SimpleRNN,Dense,Dropout

df=pd.read_csv('/content/drive/MyDrive/Share Google_Stock_Price_Train.csv')

df

df.shape

df.isnull().values.any()

df.head()

# Convert 'Date' to datetime objects
df['Date']=pd.to_datetime(df['Date'])

# Feature extraction
df['year']=df['Date'].dt.year
df['month']=df['Date'].dt.month
df['day']=df['Date'].dt.day

df['month']

df['day']

df['year']

df

features=['year','month','day']

X=df[features]
Y=df['Low']

#Feature Scaling

sc=MinMaxScaler()

X_scaled=sc.fit_transform(X)
Y_scaled=sc.fit_transform(Y.values.reshape(-1,1))

#Create Sequences

timesteps=50    # Should be less than number of rows
X_sequences=[]
Y_sequences=[]

for i in range(timesteps,len(X_scaled)):            #(50,1258)
  X_sequences.append(X_scaled[i-timesteps:i])
  Y_sequences.append(Y_scaled[i])

X_sequences,Y_sequences=np.array(X_sequences),np.array(Y_sequences)            # Converting list to array

# Ensure the target sequences have the same length as the input sequences
# Y_sequences=Y_sequences[:len(X_sequences)]

# Split the data

X_train,X_test,Y_train,Y_test=train_test_split(X_sequences,Y_sequences,test_size=0.2,random_state=0)

# Build the RNN model with dropout

model=Sequential()
model.add(SimpleRNN(50, activation="tanh", input_shape=(50,3), return_sequences=True))
model.add(Dropout(0.2))

model.add(SimpleRNN(50, activation="tanh", return_sequences=True))
model.add(Dropout(0.2))

model.add(SimpleRNN(50, activation="tanh", return_sequences=True))
model.add(Dropout(0.2))

model.add(SimpleRNN(50))
model.add(Dropout(0.2))

model.add(Dense(1, activation='linear'))

model.compile(loss="mean_squared_error", optimizer="adam", metrics=['mse'])

model.fit(X_train, Y_train, epochs=10, batch_size=10, verbose=1)

# Build the RNN model without dropout

model1=Sequential()
model1.add(SimpleRNN(50, activation="tanh", input_shape=(50,3), return_sequences=True))

model1.add(SimpleRNN(50, activation="tanh", return_sequences=True))


model1.add(SimpleRNN(50, activation="tanh", return_sequences=True))


model1.add(SimpleRNN(50))


model1.add(Dense(1, activation='linear'))

model1.compile(loss="mean_squared_error", optimizer="adam", metrics=['mse'])

model1.fit(X_train, Y_train, epochs=10, batch_size=10, verbose=1)

# Vanilla LSTM

from keras.layers import LSTM

model_v=Sequential()

model_v.add(LSTM(50, activation="tanh", input_shape=(50,3)))
model_v.add(Dense(1, activation='linear'))

model_v.compile(loss="mean_squared_error", optimizer="adam", metrics=['mse'])

model_v.fit(X_train, Y_train, epochs=10, batch_size=10, verbose=1)

Y_pred_scaled=model_v.predict(X_test)
Y_pred=sc.inverse_transform(Y_pred_scaled)
Y_test_true=sc.inverse_transform(Y_test)

plt.figure(figsize=(8,5))
plt.plot(Y_test_true, label='True Price')
plt.plot(Y_pred, label='Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Low Price')
plt.legend()
plt.show()

# Stacked LSTM Model

from keras.layers import LSTM

model_s=Sequential()

model_s.add(LSTM(50, activation="tanh", input_shape=(50,3), return_sequences=True))
model_s.add(Dropout(0.2))

model_s.add(LSTM(50, activation="tanh", return_sequences=True))
model_s.add(Dropout(0.2))

model_s.add(LSTM(50, activation="tanh"))
model_s.add(Dropout(0.2))

model_s.add(Dense(1, activation='linear'))

model_s.compile(loss="mean_squared_error", optimizer="adam", metrics=['mse'])

model_s.fit(X_train, Y_train, epochs=10, batch_size=10, verbose=1)

Y_pred_scaled=model_s.predict(X_test)
Y_pred=sc.inverse_transform(Y_pred_scaled)
Y_test_true=sc.inverse_transform(Y_test)

plt.figure(figsize=(8,5))
plt.plot(Y_test_true, label='True Price')
plt.plot(Y_pred, label='Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Low Price')
plt.legend()
plt.show()

# BiDirectional LSTM

from keras.layers import Bidirectional

model_b=Sequential()

model_b.add(Bidirectional(LSTM(50, activation="tanh", return_sequences=True), input_shape=(50,3)))
model_b.add(Dropout(0.2))

model_b.add(Bidirectional(LSTM(50, activation="tanh", return_sequences=True)))
model_b.add(Dropout(0.2))

model_b.add(Bidirectional(LSTM(50, activation="tanh", return_sequences=True)))
model_b.add(Dropout(0.2))

model_b.add(Bidirectional(LSTM(50, activation="tanh")))
model_b.add(Dropout(0.2))

model_b.add(Dense(1, activation='linear'))

model_b.compile(loss="mean_squared_error", optimizer="adam", metrics=['mse'])

model_b.fit(X_train, Y_train, epochs=10, batch_size=10, verbose=1)

Y_pred_scaled=model_b.predict(X_test)
Y_pred=sc.inverse_transform(Y_pred_scaled)
Y_test_true=sc.inverse_transform(Y_test)

plt.figure(figsize=(8,5))
plt.plot(Y_test_true, label='True Price')
plt.plot(Y_pred, label='Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Low Price')
plt.legend()
plt.show()